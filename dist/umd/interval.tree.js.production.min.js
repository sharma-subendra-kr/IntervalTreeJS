/** @license IntervalTreeJS

IntervalTreeJS, a JavaScript Binary Search Tree library that helps to query, insert and delete intervals in the binary search tree.

Copyright Â© 2019-2020 Subendra Kumar Sharma. All Rights reserved. (jobs.sharma.subendra.kr@gmail.com)

This file is part of IntervalTreeJS.

IntervalTreeJS is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

IntervalTreeJS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with IntervalTreeJS.  If not, see <https://www.gnu.org/licenses/>.

Written by Subendra Kumar Sharma.

*/
!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.IntervalTreeJS=r():t.IntervalTreeJS=r()}(window,(function(){return function(t){var r={};function e(n){if(r[n])return r[n].exports;var l=r[n]={i:n,l:!1,exports:{}};return t[n].call(l.exports,l,l.exports,e),l.l=!0,l.exports}return e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var l in t)e.d(n,l,function(r){return t[r]}.bind(null,l));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="assets",e(e.s=1)}([function(t,r,e){},function(t,r,e){"use strict";e.r(r),e.d(r,"IntervalTreesRecursive",(function(){return f})),e.d(r,"IntervalTreesIterative",(function(){return v}));var n=function(t,r,e){var n=t,l=new Array(e),a=-1;for(l[++a]=n;null!==n.left;)n,n=n.left,l[++a]=n;for(var h=n.interval.low,u=a,f=null,s=new Array(a+1),v=-1;u>=0&&l[u].interval.low===h;)f=l[u],u--,s[++v]=f;for(u>=0&&(null!==f.right?(l[u].left=f.right,f.right=null):l[u].left=null),a=u;a>=0;){var c=i(l[a]);l[a].min=c.min,l[a].max=c.max,a--}return{top:f,current:n,right:f!==n?f===t?f.right:t:n===t?n.right:t,currentToTopArr:s=o(s)}},l=function(t){for(var r=0,e=t.length;r<e;){var n=i(t[r]);t[r].min=n.min,t[r].max=n.max,r++}},i=function(t){var r,e,n,l,i,o,a,h=t.interval.low,u=t.interval.high,f=isNaN(null===(r=t.left)||void 0===r?void 0:r.min)?null:t.left.min,s=isNaN(null===(e=t.right)||void 0===e?void 0:e.min)?null:null===(n=t.right)||void 0===n?void 0:n.min,v=isNaN(null===(l=t.left)||void 0===l?void 0:l.max)?null:null===(i=t.left)||void 0===i?void 0:i.max,c=isNaN(null===(o=t.right)||void 0===o?void 0:o.max)?null:null===(a=t.right)||void 0===a?void 0:a.max;return f<h&&null!==f&&(h=f),s<h&&null!==s&&(h=s),v>u&&null!==v&&(u=v),c>u&&null!==c&&(u=c),{min:h,max:u}},o=function(t){for(var r=0,e=t.length,n=0;n<e;n++)t[n]&&r++;for(var l=new Array(r),i=0;i<r;i++)l[i]=t[i];return l},a=function(t,r){for(var e=0;t!==r;)t=t.interval.low>=r.interval.low?t.left:t.right,e++;return t===r?e++:null===t&&(e=0),e},h=function(t,r){var e=JSON.parse(JSON.stringify(t)),n=new Array(r),l=-1,i=0,o=-1;for(n[++l]=e;l>=0;){var h=n[l];h.id=++o,l--;var u=a(e,h)-1;u>i&&(i=u),h.level=u,null!==h.right&&(h.right.parentId=h.id,h.right.branched="right",h.right.parent=h,n[++l]=h.right),null!==h.left&&(h.left.parentId=h.id,h.left.branched="left",h.left.parent=h,n[++l]=h.left)}var f=[],s=[],v=72*Math.pow(2,i),c=new Array(r),p=-1;for(c[++p]=e;p>=0;){var g=c[p];if(p--,0===g.level)g.pos={c:v/2,x:v/2-36,y:5};else{var d=(Math.pow(2,i-g.level)-1)/2*72;"left"===g.branched?g.pos={c:g.parent.pos.c-d-36,x:g.parent.pos.c-d-72,y:5}:g.pos={c:g.parent.pos.c+d+36,x:g.parent.pos.c+d,y:5}}if(f[g.level]||(f[g.level]='<g class="interval-tree-print-level" data-attr="level-'.concat(g.level,'" transform="translate(',0,", ").concat(72*g.level,')">')),f[g.level]+='<g class="interval-tree-print-node" transform="translate('.concat(g.pos.x,", ").concat(g.pos.y,')">\n\t\t\t<text class="interval-tree-print-node-id" dx="5" dy="0">id: ').concat(g.id,'</text>\n\t\t\t<text class="interval-tree-print-node-parentId" dx="5" dy="15">pId: ').concat(isNaN(g.parentId)?"none":g.parentId,'</text>\n\t\t\t<text class="interval-tree-print-node-interval" dx="5" dy="30">l: ').concat(g.interval.low,", h: ").concat(g.interval.high,'</text>\n\t\t\t<text class="interval-tree-print-node-minmax" dx="5" dy="45">m: ').concat(g.min,", x: ").concat(g.max,"</text></g>"),g.parent){var m='<line x1="'.concat(g.parent.pos.c,'" y1="').concat(72*g.parent.level+5+1+60+1,'" x2="').concat(g.pos.c,'" y2="').concat(72*g.level+5+1,'" class="interval-tree-print-arrow" stroke="black"/>');s.push(m)}null!==g.right&&(c[++p]=g.right),null!==g.left&&(c[++p]=g.left)}for(var w=0;w<f.length;w++)f[w]+="</g>";return'<svg class="interval-tree-print" width="'.concat(v+40,'" height="').concat(72*(i+1)+40,'"><g class="interval-tree-print-container" transform="translate(20, 20)">').concat(f.join("")).concat(s.join(""),"</g></svg>")};function u(t){this.root=null,this.data=[],this.length=0,t&&Array.isArray(t.data)&&(this.data=JSON.parse(JSON.stringify(t.data)),this.constructTree())}u.prototype.constructor=u,u.prototype.constructNode=function(t){return{max:t.high,min:t.low,interval:{low:t.low,high:t.high},d:t.d,left:null,right:null}},u.prototype.constructTree=function(){for(var t=this.data.length,r=0;r<t;r++)this.root=this.insert(this.data[r],this.root)},u.prototype.insertRoot=function(t){return this.root=this.constructNode(t),this.root},u.prototype.getRoot=function(){return this.root},u.prototype.insert=function(t){return this.root=this._insert(this.root,t),this.root},u.prototype._insert=function(t,r){if(null===t)return this.length++,this.constructNode(r);if(t.interval.low>r.low)t.left=this._insert(t.left,r);else if(t.interval.low===r.low){this.length++;var e=t.left;t.left=this.constructNode(r),t.left.left=e;var n=i(t.left);t.left.min=n.min,t.left.max=n.max}else t.right=this._insert(t.right,r);return t.max<r.high&&(t.max=r.high),t.min>r.low&&(t.min=r.low),t},u.prototype.find=function(t,r,e,n){return this._find(this.root,t,r,e,n)},u.prototype._find=function(t,r,e,n,l){return null===t?null:!this.doOverlap(t.interval,r)||null!=e&&t.d!==e||l&&!l(t,r,e)?null!==t.left&&t.left.max>=r.low?this._find(t.left,r,e,n,l):this._find(t.right,r,e,n,l):t},u.prototype.findAll=function(t,r,e,n){var l=[];return this._findAll(this.root,t,r,e,n,l),l},u.prototype._findAll=function(t,r,e,n,l,i){if(null===t)return null;!this.doOverlap(t.interval,r)||null!=e&&t.d!==e||l&&!l(t,r,e)||i.push(t),null!==t.left&&t.left.max>=r.low&&this._findAll(t.left,r,e,n,l,i),null!==t.right&&t.right.min<=r.high&&this._findAll(t.right,r,e,n,l,i)},u.prototype.remove=function(t,r,e){return this._remove(this.root,t,r,e,null),null},u.prototype._remove=function(t,r,e,o,a){if(null===t)return t;if(t.interval.low===r.low&&t.interval.high===r.high&&(null==e||t.d===e)&&(!o||o(t,r,e))){if(a={low:t.interval.low,high:t.interval.high,d:t.d},this.length--,null===t.left)return t.right;if(null===t.right)return t.left;var h=n(t.right);t.interval=h.top.interval,t.d=h.top.d;var u=t.left;return t.left=h.top.left,t.right=h.right,h.current===h.top?t.left=u:h.current.left=u,l(h.currentToTopArr),t}if(t.interval.low>=r.low){t.left=this._remove(t.left,r,e,o,a);var f=i(t);t.min=f.min,t.max=f.max}else if(null!==t.right&&t.interval.low<r.low){t.right=this._remove(t.right,r,e,o,a);var s=i(t);t.min=s.min,t.max=s.max}return t},u.prototype.removeAll=function(t,r,e){var n=[];return this._removeAll(this.root,t,r,e,n),n},u.prototype._removeAll=function(t,r,e,o,a){if(null===t)return t;if(t.interval.low>=r.low){t.left=this._removeAll(t.left,r,e,o,a);var h=i(t);t.min=h.min,t.max=h.max}else if(null!==t.right&&t.interval.low<r.low){t.right=this._removeAll(t.right,r,e,o,a);var u=i(t);t.min=u.min,t.max=u.max}if(t.interval.low===r.low&&t.interval.high===r.high&&(null==e||t.d===e)&&(!o||o(t,r,e))){if(a.push({low:t.interval.low,high:t.interval.high,d:t.d}),this.length--,null===t.left)return t.right;if(null===t.right)return t.left;var f=n(t.right);t.interval=f.top.interval,t.d=f.top.d;var s=t.left;t.left=f.top.left,t.right=f.right,f.current===f.top?t.left=s:f.current.left=s,l(f.currentToTopArr)}return t},u.prototype.getDataInArray=function(){var t=new Array(this.length);return this.getArray(this.root,t,{iter:0}),t},u.prototype.getArray=function(t,r,e){if(null===t)return null;null!==t.left&&this.getArray(t.left,r,e),null!==t&&(r[e.iter++]={interval:{low:t.interval.low,high:t.interval.high},d:t.d}),null!==t.right&&this.getArray(t.right,r,e)},u.prototype.doOverlap=function(t,r){return t.low<=r.high&&r.low<=t.high},u.prototype.isExact=function(t,r){return t.low===r.low&&t.high===r.high},u.prototype.printHtmlTree=function(){return h(this.root,this.length)};var f=u;function s(t){this.root=null,this.data=[],this.length=0,t&&Array.isArray(t.data)&&(this.data=JSON.parse(JSON.stringify(t.data)),this.constructTree())}s.prototype.constructor=s,s.prototype.constructNode=function(t){return{max:t.high,min:t.low,interval:{low:t.low,high:t.high},d:t.d,left:null,right:null}},s.prototype.constructTree=function(){for(var t=this.data.length,r=0;r<t;r++)this.insert(this.data[r])},s.prototype.insertRoot=function(t){return this.root=this.constructNode(t),this.root},s.prototype.getRoot=function(){return this.root},s.prototype.insert=function(t){return this._insert(this.root,t)},s.prototype._insert=function(t,r){for(var e=this.constructNode(r),n=t,l=null;null!==n;)if(l=n,n.max<r.high&&(n.max=r.high),n.min>r.low&&(n.min=r.low),n.interval.low>r.low)n=n.left;else{if(n.interval.low===r.low)break;n=n.right}if(null===l)l=e,this.root=e;else if(l.interval.low>r.low)l.left=e;else if(l.interval.low===r.low){var o=l.left;l.left=e,l.left.left=o;var a=i(l.left);l.left.min=a.min,l.left.max=a.max}else l.right=e;return this.length++,e},s.prototype.find=function(t,r,e,n){return this._find(this.root,t,r,e,n)},s.prototype._find=function(t,r,e,n,l){if(!0===(n=n||!1)?n=this.isExact:!1===n&&(n=this.doOverlap),null===t)return null;for(;null!=t;){if(n(t.interval,r)&&(null==e||t.d===e)&&(!l||l(t,r,e)))return t;t=null!==t.left&&t.left.max>=r.low?t.left:t.right}return null},s.prototype.findAll=function(t,r,e,n){return this._findAll(this.root,t,r,e,n)},s.prototype._findAll=function(t,r,e,n,l){!0===(n=n||!1)?n=this.isExact:!1===n&&(n=this.doOverlap);var i=new Array(this.length),o=0,a=new Array(this.length),h=-1,u=0;if(a[++h]=t,null===t)return null;for(;h<=u;){var f=a[h];h++,!n(f.interval,r)||null!=e&&f.d!==e||l&&!l(f,r,e)||(i[o++]=f),null!==f.left&&f.left.max>=r.low&&(a[++u]=f.left),null!==f.right&&f.right.min<=r.high&&(a[++u]=f.right)}for(var s=new Array(o),v=0;v<o;v++)s[v]=i[v];return s},s.prototype.findUsingComparator=function(t,r,e){return this._findUsingComparator(this.root,t,r,e)},s.prototype._findUsingComparator=function(t,r,e,n){if(null===t)return[];var l,i=new Array(this.length),o=0,a=new Array(this.length),h=-1;for(a[++h]=t;h>=0;)l=a[h],h--,r(l)&&(i[o++]=l),null!==l.right&&n(l)&&(a[++h]=l.right),null!==l.left&&e(l)&&(a[++h]=l.left);for(var u=new Array(o),f=0;f<o;f++)u[f]=i[f];return u},s.prototype.remove=function(t,r,e){return this._remove(this.root,t,r,e)},s.prototype._remove=function(t,r,e,o){var a=null,h=null,u=null,f=new Array(this.length),s=-1,v=new Array(this.length),c=-1;if(f[++s]=t,null===t)return null;for(;s>=0;){var p=f[s];if(f[s]=null,s--,p.interval.low===r.low&&p.interval.high===r.high&&(null==e||p.d===e)&&(!o||o(p,r,e))){if(u={low:p.interval.low,high:p.interval.high,d:p.d},this.length--,null===p.left)a?(a[h]=p.right,p=p.right):this.root=p.right;else if(null===p.right)a?(a[h]=p.left,p=p.left):this.root=p.left;else{var g=n(p.right);p.interval=g.top.interval,p.d=g.top.d;var d=p.left;p.left=g.top.left,p.right=g.right,g.current===g.top?p.left=d:g.current.left=d,l(g.currentToTopArr)}p&&(v[++c]=p);break}v[++c]=p,null!==p.right&&p.interval.low<r.low?(a=p,h="right",f[++s]=p.right):null!==p.left&&p.interval.low>=r.low&&(a=p,h="left",f[++s]=p.left)}for(;c>=0;){var m=i(v[c]);v[c].min=m.min,v[c].max=m.max,c--}return u},s.prototype.removeAll=function(t,r,e){return this._removeAll(this.root,t,r,e)},s.prototype._removeAll=function(t,r,e,o){var a=null,h=null,u=new Array(this.length),f=0,s=new Array(this.length),v=-1,c=new Array(this.length),p=-1;if(s[++v]=t,null===t)return null;for(;v>=0;){var g=s[v];if(s[v]=null,v--,g.interval.low!==r.low||g.interval.high!==r.high||null!=e&&g.d!==e||o&&!o(g,r,e))c[++p]=g,null!==g.right&&g.interval.low<r.low?(a=g,h="right",s[++v]=g.right):null!==g.left&&g.interval.low>=r.low&&(a=g,h="left",s[++v]=g.left);else{if(u[f++]={low:g.interval.low,high:g.interval.high,d:g.d},this.length--,null===g.left)a?(a[h]=g.right,g=g.right):this.root=g.right;else if(null===g.right)a?(a[h]=g.left,g=g.left):this.root=g.left;else{var d=n(g.right);g.interval=d.top.interval,g.d=d.top.d;var m=g.left;g.left=d.top.left,g.right=d.right,d.current===d.top?g.left=m:d.current.left=m,l(d.currentToTopArr)}g&&(s[++v]=g)}}for(;p>=0;){var w=i(c[p]);c[p].min=w.min,c[p].max=w.max,p--}for(var y=new Array(f),x=0;x<f;x++)y[x]=u[x];return y},s.prototype.getSortedData=function(){if(null===this.root)return[];for(var t=new Array(this.length),r=0,e=new Array(this.length),n=-1,l=this.root;null!==l||n>=0;){for(;null!==l;)e[++n]=l,l=l.left;l=e[n--],t[r++]={interval:{low:l.interval.low,high:l.interval.high},d:l.d},l=l.right}return t},s.prototype.doOverlap=function(t,r){return t.low<=r.high&&r.low<=t.high},s.prototype.isExact=function(t,r){return t.low===r.low&&t.high===r.high},s.prototype.printHtmlTree=function(){return h(this.root,this.length)};var v=s;e(0)}])}));